{{#markdown}}
### Business Logic

The news search project takes as input a **search.json** file containing
the following object properties:

-   **searchProps**: the project input, i.e. an object with query,
    startYear, endYear and so on.

-   **webmiddleSettings**: settings to apply to the main webmiddle
    object.

-   **evaluateOptions**: custom rules for defining how services should
    be evaluated. See the technical documentation for details.

In addition to that, the project also takes an optional
**search.private.json** file, which has the same format of search.json.
This file can be used to store sensitive data such as API keys,
especially in case the project is under version control, or more
generally in case the code needs to be shared, since the user can share
the search.json while ignoring search.private.json.

On completion, the project produces as output a **newsSearch.json** file
in the **output** directory. This file contains the list of fetched
articles.

We will see that the project also supports **resuming**, meaning that in
case the process gets terminated before the search completed, it is able
of resuming the search from the last processed pages.

Resume data for the `sitename.com` site are stored under the
`output/sitename.com` folder.<br />
To start a new search and thus to skip the resume, just delete the whole
output folder.

In addition to resuming, the project also supports **retrying network
requests**, in fact the network connection might go down while the
search is running, the site might stop responding or fail and so on;
without a retrying system, the search would just terminate completely in
such a case.

The retrying applies to both http requests and browser requests.

There are cases in which a resource just isn’t available, like the case
of an url pointing to an article that was deleted, in such a case
retrying endlessly would just hang the search. For this reason, the
retrying uses a conditional rule based on the http error:

```javascript
const giveupErrorCodes = [410];
function isRetriable(err) {
  return !(err instanceof Error && err.name === 'HttpError') ||
    giveupErrorCodes.indexOf(err.statusCode) === -1;
}

const newsSearchWebmiddle = new WebMiddle({
  settings: {
    outputBasePath: path.resolve(__dirname, '../../../output'),
    verbose: false,
    network: {
      retries: (err) => {
        if (!isRetriable(err)) return 0;
        return -1;
      },
    },
    ...(searchJson.webmiddleSettings || {}),
    ...(searchPrivateJson.webmiddleSettings || {}),
  },
});
```

The “**network.retries**” setting is used by both HttpRequest and
Browser services. It can also be specified as a function that, given the
error object (*err*), returns the number of retries, with a negative
number stating “infinite retries”.

From the code above, you can see how the project is giving up on
retrying in case of a 410 error code, which states for *“old resource is
permanently unavailable and has no forwarding address”.*

Finally, the project also uses error handling: if the details for an
article just can’t be found, e.g. we get the **410 http error code**,
then the complete crash is avoided by just creating an empty article
details.

Note that both resuming, retrying and error handling are made possible
by the webmiddle core, which has out-of-the-box support for such
features. See the technical documentation for details.

Let’s now dive deep into the services used by the project business
logic.

The search is started by running the Main service.
{{/markdown}}