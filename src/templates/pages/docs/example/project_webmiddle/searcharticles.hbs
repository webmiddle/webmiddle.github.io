{{#markdown}}
### SearchArticles

Must return an array of article objects.

The wrapper for foxnews.com is straightforward:

```jsx
function SearchArticles({ webmiddle, options, ...rest }) {
  return (
    <Pipe>
      <Parent
        {...rest}
        name="page"
      />

      {({ page }) => ({
        name: 'searchArticles',
        contentType: 'application/json',
        content: page.content.root.articles.map(
          article => article.article
        ),
      })}
    </Pipe>
  );
}
```

Basically, our parent service returns an object like

```javascript
{
  "name": "page",
  "contentType": "application/json",
  "content": {
    "root": {
      "count": 1233,
      "articles": [{
        "article": {
          //[the actual article object]
        }
      }, {
        "article": {
          //[the actual article object]
        }
      }]
    }
  }
}
```

Thus, we are just extracting each “actual article object” into an array.

<br />
In the other end, the wrapper for **nytimes.com** requires more work.
This is because as we saw from the previous section, the site provides a
useful JSON API for searching articles, thus our parent SearchArticles
service just calls such API and returns the output as is.

That JSON output needs to be converted into the project format:

```jsx
function SearchArticles({
  nytimesApiKey, webmiddle, options, ...rest
}) {
  return (
    <Pipe>
      <Parent
        {...rest}
        name="page"
        apiKey={nytimesApiKey}
      />

      {({ page }) =>
        <JSONSelectToJson
          name="searchArticles"
          from={page}
        >
          <articles el=".docs > *">
            {elMap(el =>
              <article el={el}>
                <url el=".web_url">{elGet()}</url>
                <title el=".headline > .main">{elGet()}</title>
                <description el=".snippet">{elGet()}</description>
                <date el=".pub_date">
                  {elPipe([
                    elGet(),
                    dateString => getFormattedDate(
                      new Date(dateString)
                    ),
                  ])}
                </date>
                <image
                  el=".multimedia > *"
                  condition={currEl =>
                    currEl.subtype === 'thumbnail'}
                >
                  {elPipe([
                    elGet('.url'),
                    relativeUrl => relativeUrl ?
                      `http://www.nytimes.com/${relativeUrl}`
                      : null,
                  ])}
                </image>
              </article>
            )}
          </articles>
        </JSONSelectToJson>
      }

      {({ searchArticles }) => ({
        name: 'searchArticles',
        contentType: 'application/json',
        content: searchArticles.content.root.articles.map(
          article => article.article
        ),
      })}
    </Pipe>
  );
}
```

The **JSONSelectToJson** core service is used to convert the existing
JSON resource into a new JSON resource with a given schema. As the name
suggests, it uses the **JSONSelect** library for navigating and querying
the JSON object.

Such library provides CSS-like selectors which resemble those used in
jQuery / cheerio.

Here, as in the CheerioToJson conversion, the “el” actually represents a
collection of elements, however here a collection is just a plain
JavaScript array, thus we can use the standard JavaScript functions to
manipulate it.

For convenience, the JSONSelectToJson service still provides some helper
functions, such as the **elGet** helper.

Such helper, given an el (a collection of elements), just returns the
value of the first element in the collection. Moreover, it accepts an
optional selector as parameter, which is used to query the collection
before returning the first element.

<hr />
Example:

```jsx
<image
  el=".multimedia > *"
  condition={currEl => currEl.subtype === 'thumbnail'}
>
  {elPipe([
    elGet('.url'),
    relativeUrl => relativeUrl ?
      `http://www.nytimes.com/${relativeUrl}` : null,
  ])}
</image>
```

Here, with *“.multimedia &gt; \*”* we are selecting all the children of
the “**multimedia**” object. Then we apply a condition to furtherly
restrict the set of objects to select: all those with the “**subtype**”
property set to “**thumbnail**”.

The value of the image element is obtained by piping two separate steps:

-   **elGet(‘.url’)**: we are finding the first element (property) named
    “**url**” which exists in our collection at any level of dept.

-   since such url contains a relative url to the article thumbnail, we
    are then creating an absolute url by prefixing it.

<hr />
{{/markdown}}