{{#markdown}}
### context

A context represents the current evaluation state and is used to drive the further evaluation of services.  
It is composed of a **webmiddle** object and of an **options** object.

A new context can be created with the `createContext` function:

```javascript
import WebMiddle, { createContext } from 'webmiddle';

const webmiddle = new WebMiddle();

const context = createContext(webmiddle, { expectResource: true })
const otherContext = createContext(context, { retries: 1 }); // extends an existing context

// otherContext has the same webmiddle of context but has the following options:
// { expectResource: true, retries: 1 }
```

Once you have a context, you can evaluate anything you want by using it:

```jsx
const webmiddle = new WebMiddle();

evaluate(createContext(webmiddle, { expectResource: true }), (
  <FetchPageLinks
    url="https://news.ycombinator.com/"
    query="javascript"
  />,
)).then(outputResource => {
  console.log(
    JSON.stringify(outputResource.content, null, 2)
  );
});
```


It is passed to services as the second argument:

```jsx
const MyService = (props, context) => {
  // console.log(context.webmiddle)
  // console.log(context.options);
};
```

Services can override the context via static properties:

```jsx
const MyService = (props, context) => {
  console.log(context.options.retries); // 1
};

MyService.options = {
  retries: 1,
}

MyService.webmiddle = otherWebmiddle;
```

You can also specify them as functions:

```jsx
const MyService = (props, context) => {
  console.log(context.options.retries); // 1
};

MyService.options = (props, context) => {
  retries: context.webmiddle.setting('network.retries'),
}

MyService.webmiddle = otherWebmiddle;
```

In case you just need to set default options, you can use the `pickDefaults` helper:

```jsx
import { pickDefaults } from 'webmiddle';

const MyService = (props) => {
  // ...
};

MyService.options = (props, context) => pickDefaults({
  retries: context.webmiddle.setting('network.retries'),
}, context.options);
```

There is also an useful `WithOptions` service that can be used to extend a context directly with JSX:

```jsx

const MyService = () => (
  <WithOptions myCustomOption="fun" anotherOption="forever">
    <OtherService />
  </WithOptions>
);
```

`<OtherService />` will be evaluated with a new context obtained by extending the current context options with the `{ myCustomOption: 'fun', anotherOption: 'forever' }` object.

{{/markdown}}