{{#markdown}}
### evaluate

![evaluate]({{assets}}/img/documentation/webmiddle_evaluate.png "evaluate")

A different action is taken depending on the type of the value. After
the action, if the obtained value is different from the original value,
then the evaluate function is called recursively on such new value. If
no step applies to the value, then the evaluate function just returns
the value as is.

The recursive approach allows for greater composability, in fact the
function to evaluate might return a promise that returns a virtual and
so on.

Let’s see these actions.

<br />
**1)** If value is a **function**, then that function is called by
spreading as arguments the `context.options.functionParameters` array, if such
option isn’t set, then the function is called without arguments.

<hr />
**Example:**

The Pipe component sets the `context.options.functionParameters` to an array containing the resources
object, this allows the user to specify the JSX children as functions
expecting the resources obtained up to that point.
<hr />

<br />
**2)** If value is a **promise**, then the system just awaits the
resolving of such promise, so to obtain the resolved value.

<br />
**3) Virtual**

If value is a **virtual**, then the `callVirtual` function is used to call
the component associated to such virtual. The callVirtual will also create
a new options object based on the current options and on any options
specified by the virtual component (as static property).

The callVirtual will also retrieve the webmiddle instance to use in the
recursive call (i.e. down the call chain).

Thus, in the recursive call the evaluate function will use a new context
made of the new webmiddle and of the new options object.
That way they will be passed down the call chain.

<hr />
**Example:**

virtual:

```jsx
<MyComponent />
```

Where MyComponent is defined as follows:

```jsx
const MyComponent = () => (
  <MyOtherComponent />
);

MyComponent.options = {
  retries: 5,
};
```

In this case, evaluating `virtual` with a context having the `{ retries: 10 }` options,
will lead to `<MyOtherComponent />` to be evaluated recursively with a **new** context having the `{ retries: 5 }` options.
<hr />

See the [callVirtual section](http://localhost:9000/docs/technical_documentation/callvirtual.html) for details on how the new options and the
new webmiddle are calculated.

Once the recursive call completes, the eventual temporaneous webmiddle
correlation that was created will be destroyed by removing the
temporaneous parent.

Another step that is executed after the recursive call completed is the
**resource override**: if the result is a resource, then the resource
`name` and `contentType` are replaced with the `name` and `contentType`
attributes of the top virtual, if any.

<hr />
**Example:**

virtual:

```jsx
<MyComponent name=”myResourceName” />
```

Let’s suppose that MyComponent eventually returns the following resource:

```javascript
{
  name: 'other',
  contentType: 'text/plain',
  content: 'some content here'
}
```

Then such resource will be transformed to:

```javascript
{
  name: 'myResourceName',
  contentType: 'text/plain',
  content: 'some content here'
}
```

The resource override is a must when composing components, as it makes
sure that resources will have expected names, since they will be often
referenced by their names, such as in the Pipe and Parallel components.

<br />
**4)** If value isn’t a **resource**, then the system checks if the
`context.options.expectResource` is true, in such a case, an exception will be
thrown.

<br />
**5)** As **default**, the value is returned as is.
{{/markdown}}