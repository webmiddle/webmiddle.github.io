{{#markdown}}
### webmiddle

The core of the whole system, provides a **WebMiddle class** for the
evaluation of services, handling resources and settings.

A webmiddle instance can also have a **parent**, i.e. another webmiddle
instance from which the webmiddle inherits settings and services.

A webmiddle can be seen as a container of related services plus settings
to support them, for example you may have a webmiddle for a site, a
webmiddle for a project and so on.

Moreover, by also setting the parent, you can create a **tree** of
webmiddle instances that can be used in more complex scenarios, for
example the webmiddle for the site handler that we have seen in the
previous section can have the site webmiddle as parent.

A webmiddle **application** will always have at least one webmiddle
instance, i.e. a root instance, which might even have no services
associated to it. The reasoning is that the system provides a way of
evaluating services that aren’t associated to any webmiddle; in such a
case, the webmiddle takes ownership of the service for all the time
required to evaluate it.

The system is also able of creating webmiddle trees dynamically, meaning
that when evaluating a service associated to another webmiddle, a parent
correlation between the service webmiddle and the caller webmiddle will
be established, this way the service will have access to any setting,
option and service of the caller webmiddle as default.

This **dynamic system** is especially useful in case of general purpose
services, such as HttpRequest, that aren’t meant to be bound to any
particular webmiddle, but that need access to settings to decide how to
be evaluated, for example to base the number of retries on the
“network.retries” setting.

A webmiddle instance has the following **properties**:

<table class="table table-bordered table-striped table-responsive">
  <thead>
    <tr>
      <td>Name</td>
      <td>Description</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>name</td>
      <td>String used to identify the webmiddle. It is optional.</td>
    </tr>
    <tr>
      <td>parent</td>
      <td>A webmiddle instance that should be used as the webmiddle parent. It is optional.</td>
    </tr>
    <tr>
      <td>services</td>
      <td>An object with the format `<path : String, service>` containing the services that should be associated to the webmiddle, it shouldn’t be accessed directly (use the **service function** instead).</td>
    </tr>
    <tr>
      <td>settings</td>
      <td>An object with the instance settings, it shouldn’t be accessed directly (use the **setting function** instead).</td>
    </tr>
    <tr>
      <td>cookieManager</td>
      <td>Used as a jar to store and retrieve cookies, it is shared among all the webmiddle instances.</td>
    </tr>
  </tbody>
</table>

The services added to the webmiddle at construction time are
**registered** to the instance, namely, instead of adding the service as
is, the service gets wrapped in a higher order service that is
associated to the new webmiddle.

A webmiddle instance has the following **functions**:

-   **service(path : String)**<br />
    Returns the service with the given path. If there is no such service
    in the webmiddle, then the function is called recursively on the
    parent, if any.

-   **setting(path : String)<br />
    **Just like the service function, but for settings. Also uses the
    parent if needed.

-   **log(…args)<br />
    **Utility logging function, the args are printed to the console. The
    log is skipped if the “verbose” setting is not true.

-   **registerService(path, Service)<br />
    **Allows to add a service to a webmiddle, this is mainly used
    internally at construction time, but can also be used to add a
    service at a later time.

-   **isVirtual(target)<br />
    **Returns true if *target* is a **virtual**, i.e. if it is an object
    having only the following properties: type, attributes and
    children.<br />
    Any JSX is transpiled into a virtual at build time, while other
    services might create virtual objects explicitly, for example
    resource converters such as the CheerioToVirtual service.

-   **isResource(target)<br />
    **Returns true if *target* is a **resource**, i.e. if it is an
    object having only the following properties: name, contentType and
    content.

-   **evaluate(value, options)<br />
    **The most important function, can evaluate pretty much anything: a
    function, a promise, a virtual, a resource and so on.

-   **callVirtual(virtual, options)<br />
    **It is mostly used by the evaluate function, it is used to
    translate a virtual into the actual service call, by making sure to
    also pass the correct properties (props) to the service. It also
    handles retries and error handling regarding the service.
{{/markdown}}