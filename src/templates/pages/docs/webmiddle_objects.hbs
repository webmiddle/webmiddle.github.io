{{#markdown}}
### webmiddle objects

## OUTDATED ##

The framework provides a webmiddle class that can be used to create webmiddle objects.

Multiple services targeting websites, web APIs or collection of web resources can be grouped together into so called webmiddle objects, to be reusable in different applications.<br />
Each webmiddle object exposes settings accessible by all of its services and can be easily turned into a REST API for remote access.

A webmiddle can be seen as a container of related services plus settings
to support them, for example you may have a webmiddle for a site, a
webmiddle for a project and so on.

Moreover, by also setting the parent, you can create a **tree** of
webmiddle instances that can be used in more complex scenarios.

The services registered to a webmiddle are wrapped in a higher order service that is
associated to that webmiddle. This way the service will be able to use the webmiddle,
with its settings and services, during evaluation.

A webmiddle **application** will always have at least one webmiddle
object, i.e. a root object, which might even have no services
associated to it. The reasoning is that the system provides a way of
evaluating services that aren’t associated to any webmiddle; in such a
case, the root webmiddle takes ownership of the service for all the time
required to evaluate it.

The system is also able of creating webmiddle trees dynamically, meaning that when evaluating a service associated to another webmiddle, a parent correlation between the service webmiddle and the caller webmiddle will be established, this way the service will have access to any setting, option and service of the caller webmiddle as default.

See the [advanced section](/docs/advanced) for more info.

<br />
**Properties**:

<table class="table table-bordered table-striped table-responsive">
  <thead>
    <tr>
      <td>Name</td>
      <td>Description</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>name</td>
      <td>String used to identify the webmiddle. It is optional.</td>
    </tr>
    <tr>
      <td>parent</td>
      <td>A webmiddle instance that should be used as the webmiddle parent. It is optional.</td>
    </tr>
    <tr>
      <td>services</td>
      <td>An object with the format `<path : String, service>` containing the services that should be associated to the webmiddle, it shouldn’t be accessed directly (use the **service function** instead).</td>
    </tr>
    <tr>
      <td>settings</td>
      <td>An object with the instance settings, it shouldn’t be accessed directly (use the **setting function** instead).</td>
    </tr>
    <tr>
      <td>cookieManager</td>
      <td>Used as a jar to store and retrieve cookies, it is shared among all the webmiddle instances.</td>
    </tr>
  </tbody>
</table>

<br />
**Methods**:

-   **service(path : String)**<br />
    Returns the service with the given path. If there is no such service
    in the webmiddle, then the function is called recursively on the
    parent, if any.

-   **registerService(path, Service)<br />
    **Allows to add a service to a webmiddle, this is mainly used
    internally at construction time, but can also be used to add a
    service at a later time.

-   **log(…args)<br />
    **Utility logging function, the args are printed to the console. The
    log is skipped if the “verbose” setting is not true.

{{/markdown}}